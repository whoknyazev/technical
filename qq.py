from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import logging
from datetime import datetime, time, timezone, timedelta
from aiogram import F
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, ContentType, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
API_TOKEN = '8079401890:AAEViDARVCq3TpDi1RWAYB6KwfJsuKf_mAg'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_CHAT_ID = -1002486131912  
ADMIN_IDS = [605530472, 296187600]

EKAT_TZ = timezone(timedelta(hours=5))  # –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+5)
WORKING_HOURS = (time(8, 0), time(20, 0))  # –° 8:00 –¥–æ 20:00

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserStates(StatesGroup):
    waiting_for_problem = State()
    waiting_for_confirm = State()
    contacting_admin = State()

class AdminStates(StatesGroup):
    waiting_for_reply = State()
    contacting_user = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
user_requests = {}
admin_responses = {}
request_counter = 0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def is_within_working_hours():
    current_time = datetime.now(EKAT_TZ).time()
    return WORKING_HOURS[0] <= current_time <= WORKING_HOURS[1]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
def generate_request_id():
    global request_counter
    request_counter += 1
    date_part = datetime.now(EKAT_TZ).strftime("%Y%m%d")
    return f"{date_part}-{request_counter:05d}"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
def main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞—è–≤–∫–∞ üìù"), KeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏ üìå")],
            [KeyboardButton(text="–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º üì§"), KeyboardButton(text="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ‚öôÔ∏è")]
        ],
        resize_keyboard=True
    )
    return keyboard


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥.")
    await state.clear()
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –ò–¢-–æ—Ç–¥–µ–ª —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 8:00 –¥–æ 20:00 –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.\n'
        '–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—à—É –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –∫–Ω–æ–ø–∫–æ–π "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª".',
        reply_markup=main_menu()
    )

# –ö–æ–º–∞–Ω–¥–∞ /task
@dp.message(Command("task"))
async def admin_task_list(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    active_tasks = []
    completed_tasks = []

    for req_id, req_data in user_requests.items():
        admin_info = req_data.get("admin", {})
        admin_name = admin_info.get("name", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
        task_info = (
            f"–ó–∞—è–≤–∫–∞ {req_id}\n"
            f"–ü—Ä–æ–±–ª–µ–º–∞: {req_data['problem']}\n"
            f"–î–∞—Ç–∞: {req_data['time']}\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_name}\n"
        )

        if req_data["status"] == "–í—ã–ø–æ–ª–Ω–µ–Ω–æ":
            completed_tasks.append(task_info)
        else:
            active_tasks.append(task_info)

    response = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n"
    if active_tasks:
        response += "üîπ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n\n" + "\n".join(active_tasks) + "\n\n"
    else:
        response += "üîπ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"

    if completed_tasks:
        response += "‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n\n" + "\n".join(completed_tasks) + "\n\n"
    else:
        response += "‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"

    await message.answer(response, parse_mode="Markdown")


# –ö–Ω–æ–ø–∫–∞ "–ó–∞—è–≤–∫–∞"
@dp.message(lambda message: message.text == "–ó–∞—è–≤–∫–∞ üìù")
async def create_request(message: types.Message, state: FSMContext):
    if not is_within_working_hours():
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.")
        return
    await state.set_state(UserStates.waiting_for_problem)
    await message.answer(
        '–î–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø—Ä–æ—Å–∏–º —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n'
        '–ò–≤–∞–Ω, –ü–µ—Ä–º—å, 8912-345-67-89 - —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ –∏–ª–∏ 151 - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π. –°—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ PERM-MGR-1, –Ω–µ —Ö–æ—á–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
@dp.message(UserStates.waiting_for_problem)
async def handle_problem_description(message: types.Message, state: FSMContext):
    if not is_within_working_hours():
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.")
        return
    problem_text = message.text
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    request_id = generate_request_id()
    current_time = datetime.now(EKAT_TZ).strftime("%Y-%m-%d %H:%M:%S")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    user_requests[request_id] = {
        "user_id": user_id,
        "user_name": user_name,
        "problem": problem_text,
        "status": "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        "time": current_time
    }

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
    logging.info(
        f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: {request_id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})\n"
        f"–î–∞—Ç–∞: {current_time}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {problem_text}"
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data=f"confirm_request_{request_id}")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"cancel_request_{request_id}")]
        ]
    )

    await state.set_state(UserStates.waiting_for_confirm)
    await message.answer(
        f"–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞:\n\n"
        f"–ò–º—è: {user_name}\n"
        f"ID: {user_id}\n"
        f"–î–∞—Ç–∞: {current_time}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {problem_text}\n"
        f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {request_id}",
        reply_markup=confirm_keyboard
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@dp.callback_query(lambda callback: callback.data.startswith("confirm_request_"))
async def confirm_request(callback: types.CallbackQuery, state: FSMContext):
    if not is_within_working_hours():
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.")
        return
    request_id = callback.data.split("_")[2]
    if request_id not in user_requests:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        return

    user_requests[request_id]["status"] = "–í —Ä–∞–±–æ—Ç–µ"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_request_{request_id}")]
        ]
    )

    await bot.send_message(
        ADMIN_CHAT_ID,
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
        f"–ò–º—è: {user_requests[request_id]['user_name']}\n"
        f"ID: {user_requests[request_id]['user_id']}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {user_requests[request_id]['problem']}\n"
        f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {request_id}",
        reply_markup=admin_keyboard
    )

    await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ò–¢-–æ—Ç–¥–µ–ª.", reply_markup=main_menu())
    await state.clear()

# –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
@dp.callback_query(lambda callback: callback.data.startswith("cancel_request_"))
async def cancel_request(callback: types.CallbackQuery, state: FSMContext):
    if not is_within_working_hours():
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.")
        return    
    request_id = callback.data.split("_")[2]
    if request_id in user_requests:
        del user_requests[request_id]
    await callback.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
@dp.callback_query(lambda callback: callback.data.startswith("take_request_"))
async def take_request(callback: types.CallbackQuery):
    request_id = callback.data.split("_")[2]
    admin_id = callback.from_user.id
    admin_name = callback.from_user.username or callback.from_user.full_name

    if request_id in user_requests:
        user_requests[request_id]["status"] = "–í —Ä–∞–±–æ—Ç–µ"
        user_requests[request_id]["admin"] = {"id": admin_id, "name": admin_name}

        admin_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_request_{request_id}")],
                [InlineKeyboardButton(text="–°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", callback_data=f"contact_user_{request_id}")]
            ]
        )

        await callback.message.answer(
            f"–ó–∞—è–≤–∫–∞ {request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}.",
            reply_markup=admin_keyboard
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_requests[request_id]["user_id"],
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ {request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    else:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
@dp.callback_query(lambda callback: callback.data.startswith("complete_request_"))
async def complete_request(callback: types.CallbackQuery):
    request_id = callback.data.split("_")[2]
    if request_id in user_requests:
        user_requests[request_id]["status"] = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        await callback.message.answer(f"–ó–∞—è–≤–∫–∞ {request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        await bot.send_message(user_requests[request_id]["user_id"], f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ {request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    else:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
@dp.callback_query(lambda callback: callback.data.startswith("contact_user_"))
async def contact_user(callback: types.CallbackQuery, state: FSMContext):
    request_id = callback.data.split("_")[2]
    if request_id in user_requests:
        user_id = user_requests[request_id]["user_id"]
        await state.set_state(AdminStates.contacting_user)
        await state.update_data(request_id=request_id, user_id=user_id)
        await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    else:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(StateFilter(AdminStates.contacting_user))
async def send_message_to_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    text = message.text

    await bot.send_message(user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{text}")
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ –∑–∞—è–≤–∫–∏"
@dp.message(lambda message: message.text == "–ú–æ–∏ –∑–∞—è–≤–∫–∏ üìå")
async def my_requests(message: types.Message):
    if not is_within_working_hours():
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.")
        return
    user_id = message.from_user.id
    requests = [
        f"–ó–∞—è–≤–∫–∞ {req_id} - {req_data['status']}\n–ü—Ä–æ–±–ª–µ–º–∞: {req_data['problem']}"
        for req_id, req_data in user_requests.items()
        if req_data["user_id"] == user_id
    ]
    if requests:
        await message.answer("\n\n".join(requests), reply_markup=main_menu())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=main_menu())

# –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"
@dp.message(lambda message: message.text == "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º üì§")
async def contact_admin(message: types.Message, state: FSMContext):
    if not is_within_working_hours():
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.")
        return
    await state.set_state(UserStates.contacting_admin)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
@dp.message(StateFilter(UserStates.contacting_admin))
async def send_to_admin(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if not is_within_working_hours():
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.")
        return

    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    user_id = message.from_user.id
    user_text = message.text

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    reply_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{user_id}")]]
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    admin_responses[user_id] = admin_responses.get(user_id, {
        "user_name": user_name,
        "user_id": user_id,
        "messages": []
    })
    admin_responses[user_id]["messages"].append(message)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –º–µ–¥–∏–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        if message.text:
            await bot.send_message(ADMIN_CHAT_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}:\n{message.text}", reply_markup=reply_keyboard)
        elif message.photo:
            await bot.send_photo(
                ADMIN_CHAT_ID,
                photo=message.photo[-1].file_id,
                caption=f"–§–æ—Ç–æ –æ—Ç {user_name}",
                reply_markup=reply_keyboard
            )
        elif message.video:
            await bot.send_video(
                ADMIN_CHAT_ID,
                video=message.video.file_id,
                caption=f"–í–∏–¥–µ–æ –æ—Ç {user_name}",
                reply_markup=reply_keyboard
            )
        elif message.document:
            await bot.send_document(
                ADMIN_CHAT_ID,
                document=message.document.file_id,
                caption=f"–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user_name}",
                reply_markup=reply_keyboard
            )
        elif message.audio:
            await bot.send_audio(
                ADMIN_CHAT_ID,
                audio=message.audio.file_id,
                caption=f"–ê—É–¥–∏–æ –æ—Ç {user_name}",
                reply_markup=reply_keyboard
            )
        elif message.voice:
            await bot.send_voice(
                ADMIN_CHAT_ID,
                voice=message.voice.file_id,
                caption=f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}",
                reply_markup=reply_keyboard
            )
        elif message.video_note:
            await bot.send_video_note(
                ADMIN_CHAT_ID,
                video_note=message.video_note.file_id,
                reply_markup=reply_keyboard
            )
        else:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=main_menu())
    except TelegramBadRequest as e:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@dp.callback_query(lambda callback: callback.data.startswith("reply_to_"))
async def reply_to_user(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])
    await state.set_state(AdminStates.waiting_for_reply)
    await state.update_data(user_id=user_id)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message(StateFilter(AdminStates.waiting_for_reply))
async def send_reply_to_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    text = message.text

    await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{text}")
    await message.answer("–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
@dp.message(lambda message: message.text == "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ‚öôÔ∏è")
async def bot_functionality(message: types.Message):
    await message.answer(
        '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:\n\n'
        '"–ó–∞—è–≤–∫–∞ üìù" - –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É, –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å, —Å–ø—Ä–æ—Å–∏—Ç –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ –æ–Ω –∑–∞–ø–∏—Å–∞–ª –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n'
        '"–ú–æ–∏ –∑–∞—è–≤–∫–∏ üìå" - –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É, –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å.\n\n'
        '"–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º üì§" - –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ª–∏–±–æ –ø–æ–º–æ—â—å, –±–µ–∑ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.\n\n',
        reply_markup=main_menu()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
